'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var Count = _interopDefault(require('countup.js'));
var PropTypes = _interopDefault(require('prop-types'));
var React = require('react');
var React__default = _interopDefault(React);
var warning = _interopDefault(require('warning'));

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var CountUp = function (_Component) {
  _inherits(CountUp, _Component);

  function CountUp() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, CountUp);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = CountUp.__proto__ || Object.getPrototypeOf(CountUp)).call.apply(_ref, [this].concat(args))), _this), _this.createInstance = function () {
      // Warn when user didn't use containerRef at all
      warning(_this.containerRef.current && _this.containerRef.current instanceof HTMLElement, 'Couldn\'t find attached element to hook the CountUp instance into! Try to attach "containerRef" from the render prop to a an HTMLElement, eg. <span ref={containerRef} />.');

      var _this$props = _this.props,
          decimal = _this$props.decimal,
          decimals = _this$props.decimals,
          duration = _this$props.duration,
          easingFn = _this$props.easingFn,
          end = _this$props.end,
          formattingFn = _this$props.formattingFn,
          prefix = _this$props.prefix,
          separator = _this$props.separator,
          start = _this$props.start,
          suffix = _this$props.suffix,
          useEasing = _this$props.useEasing;


      return new Count(_this.containerRef.current, start, end, decimals, duration, {
        decimal: decimal,
        easingFn: easingFn,
        formattingFn: formattingFn,
        separator: separator,
        prefix: prefix,
        suffix: suffix,
        useEasing: useEasing,
        useGrouping: !!separator
      });
    }, _this.pauseResume = function () {
      var _this2 = _this,
          reset = _this2.reset,
          start = _this2.restart,
          update = _this2.update;
      var onPauseResume = _this.props.onPauseResume;


      _this.instance.pauseResume();

      onPauseResume({ reset: reset, start: start, update: update });
    }, _this.reset = function () {
      var _this3 = _this,
          pauseResume = _this3.pauseResume,
          start = _this3.restart,
          update = _this3.update;
      var onReset = _this.props.onReset;


      _this.instance.reset();

      onReset({ pauseResume: pauseResume, start: start, update: update });
    }, _this.restart = function () {
      _this.reset();
      _this.start();
    }, _this.start = function () {
      var _this4 = _this,
          pauseResume = _this4.pauseResume,
          reset = _this4.reset,
          start = _this4.restart,
          update = _this4.update;
      var _this$props2 = _this.props,
          delay = _this$props2.delay,
          onEnd = _this$props2.onEnd,
          onStart = _this$props2.onStart;

      var run = function run() {
        return _this.instance.start(function () {
          return onEnd({ pauseResume: pauseResume, reset: reset, start: start, update: update });
        });
      };

      // Delay start if delay prop is properly set
      if (delay > 0) {
        setTimeout(run, delay * 1000);
      } else {
        run();
      }

      onStart({ pauseResume: pauseResume, reset: reset, update: update });
    }, _this.update = function (newEnd) {
      var _this5 = _this,
          pauseResume = _this5.pauseResume,
          reset = _this5.reset,
          start = _this5.restart;
      var onUpdate = _this.props.onUpdate;


      _this.instance.update(newEnd);

      onUpdate({ pauseResume: pauseResume, reset: reset, start: start });
    }, _this.containerRef = React__default.createRef(), _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(CountUp, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _props = this.props,
          children = _props.children,
          delay = _props.delay;

      this.instance = this.createInstance();

      // Don't invoke start if component is used as a render prop
      if (typeof children === 'function' && delay !== 0) return;

      // Otherwise just start immediately
      this.start();
    }
  }, {
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(nextProps) {
      var hasCertainPropsChanged = this.props.duration !== nextProps.duration || this.props.end !== nextProps.end || this.props.start !== nextProps.start;

      return hasCertainPropsChanged || this.props.redraw;
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps) {
      // If duration or start has changed, there's no way to update the duration
      // or start value. So we need to re-create the CountUp instance in order to
      // restart it.
      if (this.props.duration !== prevProps.duration || this.props.start !== prevProps.start) {
        this.instance = this.createInstance();
        this.start();
      }

      // Only end value has changed, so reset and and re-animate with the updated
      // end value.
      if (this.props.end !== prevProps.end) {
        this.instance.reset();
        this.instance.update(this.props.end);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props2 = this.props,
          children = _props2.children,
          className = _props2.className,
          style = _props2.style;
      var containerRef = this.containerRef,
          pauseResume = this.pauseResume,
          reset = this.reset,
          restart = this.restart,
          update = this.update;


      if (typeof children === 'function') {
        return children({
          countUpRef: containerRef,
          pauseResume: pauseResume,
          reset: reset,
          start: restart,
          update: update
        });
      }

      return React__default.createElement('span', { className: className, ref: containerRef, style: style });
    }
  }]);

  return CountUp;
}(React.Component);

CountUp.propTypes = {
  decimal: PropTypes.string,
  decimals: PropTypes.number,
  delay: PropTypes.number,
  easingFn: PropTypes.func,
  end: PropTypes.number.isRequired,
  formattingFn: PropTypes.func,
  onEnd: PropTypes.func,
  onStart: PropTypes.func,
  prefix: PropTypes.string,
  redraw: PropTypes.bool,
  separator: PropTypes.string,
  start: PropTypes.number,
  suffix: PropTypes.string,
  style: PropTypes.object,
  useEasing: PropTypes.bool
};
CountUp.defaultProps = {
  decimal: '.',
  decimals: 0,
  delay: null,
  duration: null,
  easingFn: null,
  formattingFn: null,
  onEnd: function onEnd() {},
  onPauseResume: function onPauseResume() {},
  onReset: function onReset() {},
  onStart: function onStart() {},
  onUpdate: function onUpdate() {},
  prefix: '',
  redraw: false,
  separator: '',
  start: 0,
  suffix: '',
  style: undefined,
  useEasing: true
};

module.exports = CountUp;
